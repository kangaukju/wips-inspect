package air.wips.inspect.osdep;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

import air.wips.inspect.log.D;
import air.wips.inspect.utils.ListUtil;
import air.wips.inspect.utils.ProcessUtil;
import air.wips.inspect.utils.StringUtil;

public class Tools {
	static public int [] CHANNEL_5GHZ = {
			36,40,44,48,52,56,60,64,100,104,108,112,116,120,124,128,132,136,140,149,153,157,161,165,
	};
	
	static public int [] CHANNEL_2GHZ = {
			1,2,3,4,5,6,7,8,9,10,11,12,13,14,
	};
	
	static boolean isMonitorDevice(String ifname) {
		return ifname.endsWith("mon");
	}
	
	static public List<WifiDevice> changeMonitorAll(boolean monitor) throws Exception {
		List<WifiDevice> changed = new ArrayList<>();
		List<WifiDevice> devices = getWifiInterface();
		WifiDevice device;
		
		if (devices == null || devices.size() == 0) {
			return null;
		}
		
		for (WifiDevice d : devices) {
			if (d.isMonitor()) {
				if (!monitor) {					
					device = changeMonitor(d.getIfname(), false);
					if (device != null) {
						D.log("<changeMonitorAll("+monitor+")> <monitor=false> "+device);
						changed.add(device);
					}
				}
			} else {
				if (monitor) {
					device = changeMonitor(d.getIfname(), true);
					if (device != null) {
						D.log("<changeMonitorAll("+monitor+")> <monitor=true> "+device);
						changed.add(device);
					}
				}
			}
		}
		return changed;
	}

	static public String getDefaultCurrentWifiDev() {
		String dev = System.getProperty("CURRENT_WIFI");
		if (StringUtil.isNull(dev)) {
			return null;
		}
		return dev;
	}
	
	static public String getDefaultShooterWifiDev() {
		String dev = System.getProperty("SHOOTER_WIFI");
		if (StringUtil.isNull(dev)) {
			return null;
		}
		return dev;
	}
	
	static public String getDefaultCaptureWifiDev() {
		String dev = System.getProperty("CAPTURE_WIFI");
		if (StringUtil.isNull(dev)) {
			return null;
		}
		return dev;
	}
	
	static public boolean isChannel(int channel) {
		return isChannel2GHZ(channel) || isChannel5GHZ(channel);
	}
	
	static public boolean isChannel2GHZ(int channel) {
		for (int i=0; i<CHANNEL_2GHZ.length; i++) {
			if (channel == CHANNEL_2GHZ[i]) {
				return true;
			}
		}
		return false;
	}
	
	static public boolean isChannel5GHZ(int channel) {
		for (int i=0; i<CHANNEL_5GHZ.length; i++) {
			if (channel == CHANNEL_5GHZ[i]) {
				return true;
			}
		}
		return false;
	}
	
	static public Process startWipsInspect(
			String shooterWif, String captureWif, 
			String profileId, String timer) throws Exception 
	{
		String[] params = {
				"-s", shooterWif,
				"-c", captureWif,
				"-p", profileId,
				"-t", timer
		};
		String[] envs = {
				"DB_HOME",
				"CONF_HOME",
				"PCAP_HOME"
		};
		return ProcessUtil.processRun("wips-inspect", params, envs, false);
	}
	
	static public boolean isRunningWipsInspect(boolean wait) throws Exception {
		return ProcessUtil.isRunningProcess("wips-inspect", wait);
	}
	
	static public void stopWipsInspect() throws Exception {
		stopWipsInspect(null);
	}
	
	static public void stopWipsInspect(Process process) throws Exception {
		ProcessUtil.processStop("wips-inspect", process);
	}
	
	static public Process startAircurrent(String ifname, String channel, String refreshTime) throws Exception {
		String[] params = {
				"-i", ifname,
				"-c", channel,
				"-t", refreshTime,
				"-a", "0",
				"-s", "0"
		};
		if (StringUtil.isNull(ifname)) {
			throw new Exception("Unknown interface '"+ifname+"'");
		}
		String[] envs = {
				"DB_HOME",
				"CONF_HOME",
				"PCAP_HOME"
		};
		return ProcessUtil.processRun("aircurrent", params, envs, false);
	}

	static public void stopAirCurrent() throws Exception {
		stopAirCurrent(null);
	}
	
	static public void stopAirCurrent(Process process) throws Exception {
		ProcessUtil.processStop("aircurrent", process);
	}
	
	static public WifiDevice changeMonitor(final String ifname, boolean monitor) throws Exception {
		WifiDevice device = getWifiInterface(ifname);
		if (device == null) {
			return null;
		}

		String [] params = {
				monitor ? "start" : "stop",
				ifname
		};
		ProcessUtil.processRun("airmon-ng", params, null, 10);
		
		List<WifiDevice> devices = getWifiInterface();
		if (ListUtil.isNull(devices)) {
			return null;
		}
		for (WifiDevice dev : devices) {
			if (dev.getPhy().equals(device.getPhy())) {
				return dev;
			}
		}
		return null;
	}

	static public WifiDevice getWifiInterface(final String ifname) throws Exception {
		WifiDevice device = null;
		List<WifiDevice> devices = getWifiInterface();
		
		for (WifiDevice d : devices) {
			if (ifname.equals(d.getIfname())) {
				device = d;
			}
		}
		return device;
	}
	
	static public List<WifiDevice> getWifiInterface() throws Exception {
		BufferedReader out = null;
		Process process = null;
		String line;
		StringTokenizer st;
		List<WifiDevice> devices = new ArrayList<>();
		WifiDevice device;
		String phy;
		String chipset;
		
		try {
			process = ProcessUtil.processRun("airmon-ng");
			process.getOutputStream().close();
			process.getErrorStream().close();
			out = new BufferedReader(new InputStreamReader(process.getInputStream()));
			while ((line = out.readLine()) != null) {
				if ("".equals(line) || "\n".equals(line) || "\r".equals(line)) {
					continue;
				}
				st = new StringTokenizer(line, "\t ");
				
				if (st.countTokens() < 2) {
					continue;
				}
				phy = st.nextToken();
				if ("PHY".equals(phy)) {
					continue; // header
				}
				
				device = new WifiDevice();
				device.setPhy(phy);
				device.setIfname(st.nextToken());
				if (st.hasMoreTokens()) {
					device.setDriver(st.nextToken());
				}
				chipset = "";
				while (st.hasMoreTokens()) {
					chipset += st.nextToken();
				}
				device.setChipset(chipset);
				
				if (isMonitorDevice(device.getIfname())) {
					device.setMonitor(true);
				} else {
					device.setMonitor(false);
				}
				devices.add(device);
			}			
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		} finally {
			if (out != null) try { out.close(); } catch (Exception e) {}
			if (process != null && process.isAlive()) {
				process.destroy();
			}
		}
		return devices;
	}
	
	public static String getIP(final String host) {
		if (StringUtil.isNull(host)) {
			return "";
		}
		if (host.contains(":")) {
			String [] arr = host.split(":");
			return arr[0];
		}
		return host;
	}

	public static void main(String[] args) throws Exception {
		getWifiInterface();
	}

}
