package air.wips.inspect.utils;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import air.wips.inspect.log.D;

public class ProcessUtil {
	static final String catalinaHome = System.getProperty("catalina.home");
	static final String srcHome = catalinaHome +"/../src";
	static final String scriptsHome = catalinaHome +"/../scripts";
	
	static final HashMap<String, String> pathCacheMap = new HashMap<>();

	synchronized static private void setCacheLinuxPath(String toolname, String fullpath) {
		pathCacheMap.put(toolname, fullpath);
	}

	synchronized static private String getCacheLinuxPath(String toolname) {
		return pathCacheMap.get(toolname);
	}
	
	static private String searchInside(String dir, String filename) {
		File basedir;

		basedir = new File(dir);
		if (basedir.isDirectory()) {
//		System.out.println("basedir is directory:"+basedir.getAbsolutePath());
			File[] subdir = basedir.listFiles();
			for (File subfile : subdir) {
				if (subfile.isFile()) {
//				System.out.println("file: "+subfile.getName());
					if (filename.equals(subfile.getName())) {
						return subfile.getAbsolutePath();
					}
				} else if (subfile.isDirectory() && !Files.isSymbolicLink(subfile.toPath())) {
					String find = searchInside(subfile.getAbsolutePath(), filename);
					if (find != null) {
						return find;
					}
				}
			}
		}
		return null;
	}
	
	static public String getLinuxPath(String tool) {
		String path;
		final String[] bases = new String[] { 
				".", 
				catalinaHome,
				srcHome,
				scriptsHome,
				"/sbin", 
				"/usr/sbin", 
				"/usr/local/sbin", 
				"/bin", 
				"/usr/bin",
				"/usr/local/bin", 
				"/tmp",
		};

		path = getCacheLinuxPath(tool);
		if (path != null) {
//			System.out.println("cache match");
			return path;
		}

		for (String dir : bases) {
			if (dir != null) {
				path = searchInside(dir, tool);
				if (path != null) {
					setCacheLinuxPath(tool, path);
					return path;
				}
			}
		}
		return null;
	}
	
	static public void propertyToenvironment(ProcessBuilder pb, String name) {
		propertyToenvironment(pb, name, name);
	}
	
	static public void propertyToenvironment(ProcessBuilder pb, String property, String envname) {
		Map<String, String> map = pb.environment();
		String value = System.getProperty(property);
		if (value == null || "".equals(value)) {
			map.remove(envname);
		} else {
//		System.out.println(property + " => " + envname + " : " + value);
			map.put(envname, value);
		}
	}
	
	/*
	static public void setEnv(ProcessBuilder pb) throws Exception {
		String DB_HOME = System.getProperty("DB_HOME");
		String CONF_HOME = System.getProperty("CONF_HOME");
		String PCAP_HOME = System.getProperty("PCAP_HOME");
		
		Map<String, String> env = pb.environment();
		env.put("DB_HOME", DB_HOME);
		env.put("CONF_HOME", CONF_HOME);
		env.put("PCAP_HOME", PCAP_HOME);
	}
	*/
	
	static public String getProcessError(Process process) throws Exception {
		return inputStreamToString(process.getErrorStream());
	}
	
	static public String getProcessInput(Process process) throws Exception {
		return inputStreamToString(process.getInputStream());
	}
	
	static private String inputStreamToString(InputStream input) throws Exception {
		BufferedReader br = null;
		String line;
		StringBuffer sb = new StringBuffer();
		try {
			br = new BufferedReader(new InputStreamReader(input));
			while ((line = br.readLine()) != null) {
				if ("".equals(line)) {
					continue;
				}
				sb.append(line);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (br != null) {
				br.close();
			}
		}
		return sb.toString();
	}
	
	static void clearPid(String name) throws Exception {
		File file = new File(String.format("/var/run/%s.pid", name));
		FileWriter fw = null;
		
		if (!file.exists())
			return;
		
		try {
			fw = new FileWriter(file);
			fw.write("");
		} catch (Exception e) {
			throw e;
		} finally {
			if (fw != null) fw.close();
		}
	}
	
	static public boolean isRunningProcess(String name, boolean wait) throws Exception {
		return isRunningProcess(name, String.format("/var/run/%s.pid", name), wait);
	}
	
	static public boolean isRunningProcess(String name, String pidpath, boolean wait) throws Exception {
		File f = new File(pidpath);
		BufferedReader br = null;
		if (!f.exists()) {
			return false;
		}
		long waitTime = 0;
		try {
			D.log("wait for read pid from "+pidpath + (wait ? "(wait)" : ""));
			br = new BufferedReader(new InputStreamReader(new FileInputStream(f)));
			if (wait) {
				while (!br.ready()) {
					Thread.sleep(100);
					waitTime++;
					if (waitTime > 30)
						break;
				}
			}
			String pid = br.readLine();
//			D.log("isRunningProcess: pid:"+pid);
			if (StringUtil.isNull(pid)) {
				return false;
			}
			String cmdline = getProcCommand(pid);
//			D.log(">>isRunningProcess: cmdline:"+cmdline+ ", name:"+name);
			if (StringUtil.isNull(cmdline)) {
				D.log("failed to get proc cmdline - "+cmdline+", pid="+pid);
				return false;
			}
			return cmdline.equals(name);
		} catch (Exception e) {
			throw e;
		} finally {
			if (br != null) {
				br.close();
			}
		}
	}
	
	static private String getProcCommand(String pidnum) throws Exception {
		String cmdline = String.format("/proc/%s/comm", pidnum);
		return getProcessInput(
				processRun(
						"cat", 
						new String[] { cmdline }, 
						null, true, 2));
	}

	static public Process processRun(String name) throws Exception {
		return processRun(name, null);
	}
	
	static public Process processRun(String name, String []params) throws Exception {
		return processRun(name, params, null);
	}

	static public Process processRun(String name, String []params, String []envs) throws Exception {
		return processRun(name, params, envs, 0);
	}
	
	static public Process processRun(String name, String []params, String []envs, long waitSecond) throws Exception {
		return processRun(name, params, envs, true, waitSecond);
	}
	
	static public Process processRun(String name, String []params, String []envs, boolean multirun) throws Exception {
		return processRun(name, params, envs, multirun, 0);
	}
	
	static public Process processRun(String name, String []params, String []envs, boolean multirun, long waitSecond) throws Exception {
		String[] cmd;
		
		cmd = new String[1 + (params == null ? 0 : params.length)];
		cmd[0] = getLinuxPath(name);
		for (int i=1; i<cmd.length; i++) {
			cmd[i] = params[i-1];
		}
		
		if (!multirun) {
			D.log(name + " running check");
			if (isRunningProcess(name, false)) {
				D.log(name + " is already running...");
				return null;
			}
		}
		D.log("start run process - " + StringUtil.spread(cmd, " "));
		ProcessBuilder pb = new ProcessBuilder(cmd);
		if (envs != null && envs.length > 0) {
			for (String env : envs) {
				propertyToenvironment(pb, env);	
			}
		}
		clearPid(name);
		Process process = pb.start();
		if (waitSecond == 0) {
			return process;
		}
		
		process.getErrorStream().close();
		process.getOutputStream().close();
		process.waitFor(waitSecond, TimeUnit.SECONDS);
		return process;
	}
	
	static public void processStop(String name, Process process) throws Exception {
		if (process != null) {
			if (process.isAlive()) {
				process.destroy();
			}
		}
		String killall = getLinuxPath("killall");
		String[] cmd = {
				killall, "-9", name
		};
		new ProcessBuilder(cmd).start();
	}
}
