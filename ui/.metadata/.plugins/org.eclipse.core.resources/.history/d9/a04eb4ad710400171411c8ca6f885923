package air.wips.inspect.servlet;

import java.util.List;

import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.ServerEndpoint;

import com.google.gson.Gson;

import air.wips.inspect.error.GoodBad;
import air.wips.inspect.log.D;
import air.wips.inspect.osdep.Tools;
import air.wips.inspect.osdep.WifiDevice;
import air.wips.inspect.servlet.WipsInspectWebSocket.RequestParam;
import air.wips.inspect.utils.ListUtil;
import air.wips.inspect.utils.ProcessUtil;
import air.wips.inspect.utils.StringUtil;
import sql.inspect.wips.air.Config;
import sql.inspect.wips.air.Profile;

@ServerEndpoint("/current")
public class AirCurrentWebSocket extends AirResult {
	private Thread thread;
	
	
	private class RequestParam {
		public String state;
		public String ifname;
		public String channel;
		public String reportInterval;
		@Override
		public String toString() {
			return "RequestParam [state=" + state + ", ifname=" + ifname + ", channel=" + channel + ", reportInterval="
					+ reportInterval + "]";
		}
	}
	
	public AirCurrentWebSocket() {
		this.thread = null;
	}
	
	@OnOpen
	public void onOpen(Session session) {
		this.webSocketSession = session;
	}
	
	@OnMessage
	public String onMessage(String msg) {
		RequestParam p = new Gson().fromJson(msg, RequestParam.class);
		
		D.log(p);
		
		Process process = null;
		
		if ("start".equals(p.state)) {
			try {
				// check wifi device interface
				List<WifiDevice> wifiDevList = Tools.getWifiInterface();
				if (ListUtil.isNull(wifiDevList)) {
					return new Gson().toJson(new GoodBad().bad("wifi devices not enough"));
				}
				
				
				thread = new Thread(new AirResultReceiver(this, AirResultReceiver.AIRCURRENT_PORT, 0));
				thread.setDaemon(true);
				thread.start();
				
				
				String shooterWif = Tools.getDefaultShooterWifiDev();
				String captureWif = Tools.getDefaultCaptureWifiDev();
				
				//System.out.println("defuatl SHOOTER_WIFI="+shooterWif);
				//System.out.println("defuatl CAPTURE_WIFI="+captureWif);
				
				if (shooterWif == null || !WifiDevice.contains(wifiDevList, shooterWif)) {
					shooterWif = wifiDevList.get(0).getIfname();
				}
				if (captureWif == null || !WifiDevice.contains(wifiDevList, captureWif)) {
					captureWif = wifiDevList.get(1).getIfname();
				}

				Tools.stopWipsInspect();
				process = Tools.startWipsInspect(shooterWif, captureWif, p.profileId, p.timer);
				if (!Tools.isRunningWipsInspect(true)) {
					D.log("unable run wips-inspect tool");
					doExit();
					if (process == null) {
						D.log("Error! unable execute wips-inspect");
						return new Gson().toJson(new GoodBad().bad("Error! unable execute wips-inspect"));
					} else {
						String errorTxt = ProcessUtil.getProcessError(process);
						D.log(errorTxt);
						return new Gson().toJson(new GoodBad().bad(StringUtil.str2Html(errorTxt)));
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
				doExit();
				if (process == null) {
					return new Gson().toJson(new GoodBad().bad("Error! execute wips-inspect"));
				} else {
					return new Gson().toJson(new GoodBad().bad(e));
				}
			}
		}
		else if ("stop".equals(p.state)) {
			onClose();
		}
		else {
			return new Gson().toJson(new GoodBad().bad(
					"unknown state - "+p.state));
		}
		return new Gson().toJson(new GoodBad().good());
	}
	
	@OnClose
	public void onClose() {
		try {
			doExit();
			Tools.stopWipsInspect();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@OnError
	public String onError(Throwable e) {
		e.printStackTrace();
		onClose();
		return e.getMessage();
	}
}
