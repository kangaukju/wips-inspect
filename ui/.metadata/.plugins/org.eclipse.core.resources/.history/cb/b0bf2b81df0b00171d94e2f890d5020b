package sql.inspect.wips.air;

import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.List;

import air.wips.inspect.history.InspectHistory;

public class History {
	private String profileId;
	private String timestamp;
	private String savepath;
	private Profile profile;
	
	public static void del(String profileId) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql;
		try {
			conn = SQLite3Connection.getConnection(DBFILE.getDBFILE("profiles"));
			conn.setAutoCommit(false);
			sql = "delete from inspect_history where profile_id=?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, profileId);
			pstmt.executeUpdate();
			
			File historyDir = new File(InspectHistory.path(profileId));
			if (historyDir.exists()) {
				historyDir.delete();
			}
			conn.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try { conn.rollback(); } catch (Exception e1) {}
		} finally {
			SQLite3Connection.sqlClose(conn, pstmt);
		}
	}
	
	public static void del(String profileId, String timestamp) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql;
		try {
			conn = SQLite3Connection.getConnection(DBFILE.getDBFILE("profiles"));
			conn.setAutoCommit(false);
			sql = "delete from inspect_history where profile_id=? and timestamp=?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, profileId);
			pstmt.setString(2, timestamp);
			pstmt.executeUpdate();
			
			File historyDir = new File(InspectHistory.path(profileId+"/"+timestamp));
			if (historyDir.exists()) {
				historyDir.delete();
			}
			conn.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try { conn.rollback(); } catch (Exception e1) {}
		} finally {
			SQLite3Connection.sqlClose(conn, pstmt);
		}
	}
	
	public static void add(String profileId, String timestamp) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		
		try {
			String sql = "insert into inspect_history (profile_id, timestamp, savepath) values (?,?,?)";
			conn = SQLite3Connection.getConnection(DBFILE.getDBFILE("profiles"));
			conn.setAutoCommit(false);
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, profileId);
			pstmt.setString(2, timestamp);
			pstmt.setString(3, InspectHistory.path(profileId+"/"+timestamp));
			pstmt.executeUpdate();
			
			File historyDir = new File(InspectHistory.path(profileId+"/"+timestamp));
			if (!historyDir.exists()) {
				historyDir.mkdirs();
			}
			conn.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try { conn.rollback(); } catch (Exception e1) {}
		} finally {
			SQLite3Connection.sqlClose(conn, pstmt);
		}
	}
	
	public static History get(String profileId, String timestamp) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		History history = null;
		
		try {
			String sql = "select * from inspect_history where profile_id=? and timestamp=?";
			conn = SQLite3Connection.getConnection(DBFILE.getDBFILE("profiles"));
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, profileId);
			pstmt.setString(2, timestamp);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				history = new History();
				history.profileId = profileId;
				history.timestamp = timestamp;
				history.savepath = rs.getString("savepath");				
				history.profile = Profile.getById(profileId, true);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			SQLite3Connection.sqlClose(conn, pstmt);
		}
		return history;
	}
	
	public static History get(String profileId) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		List<History> list = null;
		
		try {
			String sql = "select * from inspect_history where profile_id=?";
			conn = SQLite3Connection.getConnection(DBFILE.getDBFILE("profiles"));
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, profileId);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				History history = new History();
				history.profileId = profileId;
				history.timestamp = rs.getString("timestamp");
				history.savepath = rs.getString("savepath");				
				history.profile = Profile.getById(profileId, true);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			SQLite3Connection.sqlClose(conn, pstmt);
		}
		return history;
	}
	
	public static void main(String [] args) {
		//History.get(profileId, timestamp)
	}
}
