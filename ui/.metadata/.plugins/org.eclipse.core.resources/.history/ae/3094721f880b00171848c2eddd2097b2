package air.wips.inspect.servlet;

import java.util.List;

import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.ServerEndpoint;

import com.google.gson.Gson;

import air.wips.inspect.conf.XmlAirConf;
import air.wips.inspect.conf.XmlAirConfEnv;
import air.wips.inspect.error.GoodBad;
import air.wips.inspect.history.InspectHistory;
import air.wips.inspect.log.D;
import air.wips.inspect.osdep.Tools;
import air.wips.inspect.osdep.WifiDevice;
import air.wips.inspect.utils.FileUtil;
import air.wips.inspect.utils.ListUtil;
import air.wips.inspect.utils.ProcessUtil;
import air.wips.inspect.utils.StringUtil;
import sql.inspect.wips.air.Config;
import sql.inspect.wips.air.History;
import sql.inspect.wips.air.Profile;

@ServerEndpoint("/inspect")
public class WipsInspectWebSocket extends AirResult {
	private Thread thread;
	
	private class RequestParam {
		public String state;
		public String profileId;
		public String timer;
		@Override
		public String toString() {
			return "RequestParam [state=" + state + ", profileId=" + profileId + ", timer=" + timer + "]";
		}
	}
	
	public WipsInspectWebSocket() {
		this.thread = null;
	}
	
	@OnOpen
	public void onOpen(Session session) {
		this.webSocketSession = session;
	}
	
	@OnMessage
	public String onMessage(String msg) {
		RequestParam p = new Gson().fromJson(msg, RequestParam.class);
		
		D.log(p);
		
		Process process = null;
		
		if ("start".equals(p.state)) {
			try {
				// check wifi device interface
				List<WifiDevice> wifiDevList = Tools.getWifiInterface();
				/*
				if (ListUtil.isNull(wifiDevList) || wifiDevList.size() < 2) {
					return new Gson().toJson(new GoodBad().bad(
							"wifi devices not enough (at least: 2)"));
				}
				*/
				
				// check profile
				Profile profile = Profile.getById(p.profileId, false);
				if (profile == null) {
					return new Gson().toJson(new GoodBad().bad(
							String.format("unknown [%s] profile", p.profileId)));
				}
				if (ListUtil.isNull(profile.getConfigList())) {
					return new Gson().toJson(new GoodBad().bad(
							String.format("empty config of [%s] profile", p.profileId)));
				}				
				for (Config conf : profile.getConfigList()) {
					if (StringUtil.isNull(conf.getShooterxml())) {
						return new Gson().toJson(new GoodBad().bad(
								String.format("shooter empty [%s:%s] config of [%s:%s] profile", 
										conf.getId(), conf.getName(), 
										profile.getId(), profile.getName())));
					}
					if (StringUtil.isNull(conf.getCapturexml())) {
						return new Gson().toJson(new GoodBad().bad(
								String.format("capture empty [%s:%s] config of [%s:%s] profile", 
										conf.getId(), conf.getName(), 
										profile.getId(), profile.getName())));						
					}
				}
				
				long maxRunningTime = (Long.valueOf(p.timer)+1) * profile.getConfigList().size();
				D.log("max running time is "+maxRunningTime+" secs");
				
				thread = new Thread(new AirResultReceiver(this, 
						AirResultReceiver.WIPSINSPECT_PORT, maxRunningTime));
				thread.setDaemon(true);
				thread.start();
				
				
				String shooterWif = Tools.getDefaultShooterWifiDev();
				String captureWif = Tools.getDefaultCaptureWifiDev();
				
				//System.out.println("defuatl SHOOTER_WIFI="+shooterWif);
				//System.out.println("defuatl CAPTURE_WIFI="+captureWif);
				
				if (shooterWif == null || !WifiDevice.contains(wifiDevList, shooterWif)) {
					shooterWif = wifiDevList.get(0).getIfname();
				}
				if (captureWif == null || !WifiDevice.contains(wifiDevList, captureWif)) {
					captureWif = wifiDevList.get(1).getIfname();
				}
				
				long now = System.currentTimeMillis();
				String savePath = InspectHistory.path(p.profileId+"/"+now);
				
				Tools.stopWipsInspect();
				process = Tools.startWipsInspect(shooterWif, captureWif, p.profileId, p.timer, savePath);
				if (!Tools.isRunningWipsInspect(true)) {
					D.log("unable run wips-inspect tool");
					doExit();
					if (process == null) {
						D.log("Error! unable execute wips-inspect");
						return new Gson().toJson(new GoodBad().bad("Error! unable execute wips-inspect"));
					} else {
						String errorTxt = ProcessUtil.getProcessError(process);
						D.log(errorTxt);
						return new Gson().toJson(new GoodBad().bad(StringUtil.str2Html(errorTxt)));
					}
				}
				
				///////////////////////////////////////////////
				// save result
				///////////////////////////////////////////////
				/*
				// copy capture/shooter xml config
				for (Config c : profile.getConfigList()) {
					{
						String from = XmlAirConfEnv.path(XmlAirConf.captureFilename(c.getId()));
						String to = savePath + "/" + XmlAirConf.captureFilename(c.getId());
						FileUtil.copy(from, to);
					}{
						String from = XmlAirConfEnv.path(XmlAirConf.shooterFilename(c.getId()));
						String to = savePath + "/" + XmlAirConf.shooterFilename(c.getId());
						FileUtil.copy(from, to);						
					}
				}
				*/
				
				History.add(p.profileId, String.valueOf(now));
				
			} catch (Exception e) {
				e.printStackTrace();
				doExit();
				if (process == null) {
					return new Gson().toJson(new GoodBad().bad("Error! execute wips-inspect"));
				} else {
					return new Gson().toJson(new GoodBad().bad(e));
				}
			}
		}
		else if ("stop".equals(p.state)) {
			onClose();
		}
		else {
			return new Gson().toJson(new GoodBad().bad("unknown state - "+p.state));
		}
		return new Gson().toJson(new GoodBad().good());
	}
	
	@OnClose
	public void onClose() {
		try {
			doExit();
			Tools.stopWipsInspect();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@OnError
	public String onError(Throwable e) {
		e.printStackTrace();
		onClose();
		return e.getMessage();
	}
}
