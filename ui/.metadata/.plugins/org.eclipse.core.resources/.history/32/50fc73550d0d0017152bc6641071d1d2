package sql.inspect.wips.air;

import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import air.wips.inspect.history.InspectHistory;
import air.wips.inspect.utils.FileUtil;

public class History {
	private String profileId;
	private String timestamp;
	private String savepath;
	private Profile profile;
	private Map<String, String> inspectXmlLogMap;
	private Map<String, String> inspectPcapLogMap;
	
	@Override
	public String toString() {
		return "History [profileId=" + profileId + ", timestamp=" + timestamp + ", savepath=" + savepath + ", profile="
				+ profile + ", inspectXmlLogMap=" + inspectXmlLogMap + ", inspectPcapLogMap=" + inspectPcapLogMap + "]";
	}

	public static void del(String profileId) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql;
		try {
			conn = SQLite3Connection.getConnection(DBFILE.getDBFILE("profiles"));
			conn.setAutoCommit(false);
			sql = "delete from inspect_history where profile_id=?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, profileId);
			pstmt.executeUpdate();
			
			File historyDir = new File(InspectHistory.path(profileId));
			if (historyDir.exists()) {
				historyDir.delete();
			}
			conn.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try { conn.rollback(); } catch (Exception e1) {}
		} finally {
			SQLite3Connection.sqlClose(conn, pstmt);
		}
	}
	
	public static void del(String profileId, String timestamp) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql;
		try {
			conn = SQLite3Connection.getConnection(DBFILE.getDBFILE("profiles"));
			conn.setAutoCommit(false);
			sql = "delete from inspect_history where profile_id=? and timestamp=?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, profileId);
			pstmt.setString(2, timestamp);
			pstmt.executeUpdate();
			
			File historyDir = new File(InspectHistory.path(profileId+"/"+timestamp));
			if (historyDir.exists()) {
				historyDir.delete();
			}
			conn.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try { conn.rollback(); } catch (Exception e1) {}
		} finally {
			SQLite3Connection.sqlClose(conn, pstmt);
		}
	}
	
	public static void add(String profileId, String timestamp) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		
		try {
			String sql = "insert into inspect_history (profile_id, timestamp, savepath) values (?,?,?)";
			conn = SQLite3Connection.getConnection(DBFILE.getDBFILE("profiles"));
			conn.setAutoCommit(false);
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, profileId);
			pstmt.setString(2, timestamp);
			pstmt.setString(3, InspectHistory.path(profileId+"/"+timestamp));
			pstmt.executeUpdate();
			
			// create history directory
			File historyDir = new File(InspectHistory.path(profileId+"/"+timestamp));
			if (!historyDir.exists()) {
				historyDir.mkdirs();
			}
			conn.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try { conn.rollback(); } catch (Exception e1) {}
		} finally {
			SQLite3Connection.sqlClose(conn, pstmt);
		}
	}
	
	public static History get(String profileId, String timestamp, boolean loadLog) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		History history = null;
		
		try {
			String sql = "select * from inspect_history where profile_id=? and timestamp=?";
			conn = SQLite3Connection.getConnection(DBFILE.getDBFILE("profiles"));
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, profileId);
			pstmt.setString(2, timestamp);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				history = new History();
				history.profileId = profileId;
				history.timestamp = timestamp;
				history.savepath = rs.getString("savepath");				
				history.profile = Profile.getById(profileId, true);
				
				if (loadLog) {
					history.inspectXmlLogMap = getInspectXmlLogMap(history.savepath);
					history.inspectPcapLogMap = getInspectPcapLogMap(history.savepath);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			SQLite3Connection.sqlClose(conn, pstmt);
		}
		return history;
	}
	
	public static List<History> get(String profileId, boolean loadLog) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		List<History> list = new ArrayList<>();
		
		try {
			String sql = "select * from inspect_history where profile_id=?";
			conn = SQLite3Connection.getConnection(DBFILE.getDBFILE("profiles"));
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, profileId);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				History history = new History();
				history.profileId = profileId;
				history.timestamp = rs.getString("timestamp");
				history.savepath = rs.getString("savepath");				
				history.profile = Profile.getById(profileId, true);
				
				if (loadLog) {
					history.inspectXmlLogMap = getInspectXmlLogMap(history.savepath);
					history.inspectPcapLogMap = getInspectPcapLogMap(history.savepath);
				}
				
				list.add(history);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			SQLite3Connection.sqlClose(conn, pstmt);
		}
		return list;
	}
	
	public static Map<String, String> getInspectXmlLogMap(String path) {
		Map<String, String> map = new HashMap<>();
		String [] xmls = FileUtil.scanFile(path, "^C_.*.xml$");
		if (xmls != null) {
			for (String xml : xmls) {
				map.put(xml.substring(0, xml.length()-4), FileUtil.getContent(path+"/"+xml));
			}
		}
		return map;
	}
	
	public static Map<String, String> getInspectPcapLogMap(String path) {
		Map<String, String> map = new HashMap<>();
		String [] pcaps = FileUtil.scanFile(path, "^C_.*.pcap$");
		if (pcaps != null) {
			map = new HashMap<>();
			for (String pcap : pcaps) {
				map.put(pcap.substring(0, pcap.length()-5), path+"/"+pcap);
			}
		}
		return map;
	}
	
	public static List<History> getAll(boolean loadLog) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		List<History> list = new ArrayList<>();
		
		try {
			String sql = "select * from inspect_history";
			conn = SQLite3Connection.getConnection(DBFILE.getDBFILE("profiles"));
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				History history = new History();
				history.profileId = rs.getString("profile_id");
				history.timestamp = rs.getString("timestamp");
				history.savepath = rs.getString("savepath");				
				history.profile = Profile.getById(history.profileId, true);
				
				if (loadLog) {
					history.inspectXmlLogMap = getInspectXmlLogMap(history.savepath);
					history.inspectPcapLogMap = getInspectPcapLogMap(history.savepath);
				}
				
				list.add(history);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			SQLite3Connection.sqlClose(conn, pstmt);
		}
		return list;
	}
	
	public static void main(String [] args) {
		System.setProperty("catalina.home", "/home/kinow/git/wips-inspect/tomcat");
		List<History> list = History.getAll(false);
		for (History h : list) {
			System.out.println(h);
		}
	}
}
